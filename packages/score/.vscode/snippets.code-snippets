{
	// Place your bouncing-box workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"fromMsc3": {
		"scope": "javascript,typescript",
		"prefix": "fromMsc3",
		"body": [
			"/**",
			" * @inheritdoc",
			" */",
			"fromMsc3(object: any): ${1:this type} {",
			"  object.elements.forEach((element: any) => {",
			"    switch (element.name) {",
			"      case '${2:child}':",
			"        $0",
			"        break;",
			"",
			"      default:",
			"        console.warn(`unhandled child of ${this.type} while reading msc file: ${element.name}`);",
			"        break;",
			"    }",
			"  });",
			"  return this;",
			"}"
		],
		"description": "Template for fromMsc3 function"
	},
	"backward for loop": {
		"scope": "javascript,typescript",
		"prefix": "forback",
		"body": [
			"// iterate backwards: https://stackoverflow.com/questions/9882284/looping-through-array-and-removing-items-without-breaking-for-loop",
			"for (let i = ${1:array}.length - 1; i >= 0; i--) {",
			"  $0",
			"}"
		],
		"description": "Backward iteration through array members.\n See https://stackoverflow.com/questions/9882284/looping-through-array-and-removing-items-without-breaking-for-loop."
	},
	"default": {
		"scope": "javascript,typescript",
		"prefix": "default",
		"body": [
			"default:",
			"  console.warn('unhandled ${1:child}: ' + ${0:this.type});",
			"  break;",
		],
		"description": "add default case in a switch statement."
	},
	"inheritdoc": {
		"scope": "javascript,typescript",
		"prefix": "inheritdoc",
		"body": [
			"/**",
			" * $0${1:@inheritdoc}",
			" */",
		],
		"description": "Add inheritdoc jsdoc comment."
	},
	"layout": {
		"scope": "javascript,typescript",
		"prefix": "layout",
		"body": [
			"/**",
			" * Layout the ${1:Element}.",
			" *",
			" * ${2:todo: layout plan}",
			" *",
			" * @param context the rendering context",
			" * @inheritdoc",
			" */",
			"async layout(context: CanvasRenderingContext2D): Promise<void> {",
			"    $0",
			"    this.bbox.height = 0",
			"    this.bbox.width  = 0",
			"}",
		],
		"description": "Add inheritdoc jsdoc comment."
	},
}
